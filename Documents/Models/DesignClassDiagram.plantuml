@startuml Design Class Diagram (DCD)

package src <<Folder>> {
    package Core <<Folder>> {
        package Repositories <<Folder>> {
            package Base <<Folder>> {
                interface IRepository {
                    + GetAllAsync(): Task<IReadOnlyList<T>>
                    + GetByIdAsync(int id): Task<T>
                    + AddAsync(T entity): Task<T>
                    + UpdateAsync(T entity): Task
                    + DeleteAsync(T entity): Task
                    + AddManyAsync(IEnumerable<T> entities): Task
                    + UpdateManyAsync(IEnumerable<T> entities): Task
                    + DeleteManyAsync(IEnumerable<T> entities): Task
                }
            }
            interface ICategoryRepository {}
            interface IProductRepository {}

            IRepository <|-- ICategoryRepository
            IRepository <|-- IProductRepository
        }
        
        package Entities <<Folder>> {
            
            class User {
                + Id: string
                + UserName: string
                + Email: string
                + Password: string
                + Role: string        
            }

            ' REVIEW - Har tilføjet Currency og ændret navigation property til Arry<Category>
            class Product {
                + Id: int
                + Sku: string
                + Ean: string
                + Name: string
                + Description: string
                + Color: string
                + Material: string
                + ProductType: string
                + ProductGroup: string
                + Price: float
                + SpecialPrice: float     
                + Currency: string
                + Supplier: string
                + SupplierSku: string
                + TemplateNo: int
                + List: int
                + Weight: float
                + Cost: float
                + Category: Array<Category>
            }

            class Category {
                + Id: int
                + Name: string
                + Description: string
                + BottomDescription : string
                + Products: Array<Product>
            }

            class Website {
                + Id: int
                + Domain: string
                + Currency: string
                + Language : string
            }

            class Platform {
                + Id: int
                + Name: string
            }
        }
    }

    Package Infrastructure <<Folder>> {
        package Data <<Folder>> {
            class PMSContext{
                + Products: DbSet<Product>
                + Categories: DbSet<Category>
            }
        }
        package Migrations <<Folder>> {
            class PMSContextModelSnapshot {}
        }

        package Repository <<Folder>> {
            package Base <<Folder>> {
                class Repository {
                    + GetAllAsync(): Task<IReadOnlyList<T>>
                    + GetByIdAsync(int id): Task<T>
                    + AddAsync(T entity): Task<T>
                    + UpdateAsync(T entity): Task
                    + DeleteAsync(T entity): Task
                    + AddManyAsync(IEnumerable<T> entities): Task
                    + UpdateManyAsync(IEnumerable<T> entities): Task
                    + DeleteManyAsync(IEnumerable<T> entities): Task
                }
            }
            class CategoryRepository {}
            class ProductRepository {}

            Base.Repository <|-- CategoryRepository
            Base.Repository <|-- ProductRepository
        }
        
    }

    package Application <<Folder>> {
        package Controllers <<Folder>> {
            class Controller
        }
    }

    package API <<Folder>> {
        package Controllers <<Folder>> {
            class ProductController
            class CategoryController
        }
    }
}

Product "1..*" -- "1..*" Category
Product "0..*" -- "0..*" Website
Website "0..*" -- "0..*" Platform

Application <..down- Core : depends on
Infrastructure <..down- Core : depends on
API <..down- Application : depends on

@enduml